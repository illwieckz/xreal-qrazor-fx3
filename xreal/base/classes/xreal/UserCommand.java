package xreal;

/*
 typedef struct usercmd_s
 {
 int             serverTime;
 int             angles[3];
 int             buttons;
 byte            weapon;		// weapon
 signed char     forwardmove, rightmove, upmove;
 } usercmd_t;
 */

/**
 * UserCommand is equivalent to usercmd_t. usercmd_t is sent to the server each
 * client frame
 * 
 * @author Robert Beckebans
 */
public class UserCommand {

	/**
	 * usercmd_t->button bits, many of which are generated by the client system,
	 * so they aren't game/cgame only definitions
	 */

	public static final int BUTTON_ATTACK = 1;

	/**
	 * displays talk balloon and disables actions
	 */
	public static final int BUTTON_TALK = 2;

	public static final int BUTTON_USE_HOLDABLE = 4;
	public static final int BUTTON_GESTURE = 8;

	/**
	 * walking can't just be infered from MOVE_RUN because a key pressed late in
	 * the frame will only generate a small move value for that frame walking
	 * will use different animations and won't generate footsteps
	 */
	public static final int BUTTON_WALKING = 16;

	public static final int BUTTON_ATTACK2 = 32; // +/-button5

//	public static final int BUTTON_AFFIRMATIVE = 32;
	public static final int BUTTON_NEGATIVE = 64;

	public static final int BUTTON_GETFLAG = 128;
	public static final int BUTTON_GUARDBASE = 256;
	public static final int BUTTON_PATROL = 512;
	public static final int BUTTON_FOLLOWME = 1024;

	/**
	 * any key whatsoever
	 */
	public static final int BUTTON_ANY = 2048;

	public int serverTime;

	public int pitch;
	public int yaw;
	public int roll;

	public int buttons;
	public byte weapon;

	public byte forwardmove, rightmove, upmove;

	UserCommand(int serverTime, int pitch, int yaw, int roll, int buttons, byte weapon, byte forwardmove, byte rightmove, byte upmove) {
		this.serverTime = serverTime;

		this.pitch = pitch;
		this.yaw = yaw;
		this.roll = roll;

		this.buttons = buttons;
		this.weapon = weapon;

		this.forwardmove = forwardmove;
		this.rightmove = rightmove;
		this.upmove = upmove;
	}
}
