import os, string, sys

Import('env')

xreal_env = env.Copy()

xreal_src = [
'code/client/cl_avi.c',
'code/client/cl_cgame.c',
'code/client/cl_cin.c',
'code/client/cl_console.c',
'code/client/cl_input.c',
'code/client/cl_keys.c',
'code/client/cl_main.c',
'code/client/cl_net_chan.c',
'code/client/cl_parse.c',
'code/client/cl_scrn.c',
'code/client/cl_ui.c',
'code/qcommon/cm_load.c',
'code/qcommon/cm_patch.c',
'code/qcommon/cm_polylib.c',
'code/qcommon/cm_test.c',
'code/qcommon/cm_trace.c',
'code/qcommon/cm_trisoup.c',
'code/qcommon/cmd.c',
'code/qcommon/common.c',
'code/qcommon/cvar.c',
'code/qcommon/files.c',
'code/qcommon/huffman.c',
'code/qcommon/md4.c',
'code/qcommon/msg.c',
'code/qcommon/net_chan.c',
'code/client/snd_adpcm.c',
'code/client/snd_dma.c',
'code/client/snd_mem.c',
'code/client/snd_mix.c',
'code/client/snd_wavelet.c',
'code/server/sv_bot.c',
'code/server/sv_ccmds.c',
'code/server/sv_client.c',
'code/server/sv_game.c',
'code/server/sv_init.c',
'code/server/sv_main.c',
'code/server/sv_net_chan.c',
'code/server/sv_snapshot.c',
'code/server/sv_world.c',
'code/game/q_math.c',
'code/game/q_shared.c',
'code/qcommon/unzip.c',
'code/botlib/be_aas_bspq3.c',
'code/botlib/be_aas_cluster.c',
'code/botlib/be_aas_debug.c',
'code/botlib/be_aas_entity.c',
'code/botlib/be_aas_file.c',
'code/botlib/be_aas_main.c',
'code/botlib/be_aas_move.c',
'code/botlib/be_aas_optimize.c',
'code/botlib/be_aas_reach.c',
'code/botlib/be_aas_route.c',
'code/botlib/be_aas_routealt.c',
'code/botlib/be_aas_sample.c',
'code/botlib/be_ai_char.c',
'code/botlib/be_ai_chat.c',
'code/botlib/be_ai_gen.c',
'code/botlib/be_ai_goal.c',
'code/botlib/be_ai_move.c',
'code/botlib/be_ai_weap.c',
'code/botlib/be_ai_weight.c',
'code/botlib/be_ea.c',
'code/botlib/be_interface.c',
'code/botlib/l_crc.c',
'code/botlib/l_libvar.c',
'code/botlib/l_log.c',
'code/botlib/l_memory.c',
'code/botlib/l_precomp.c',
'code/botlib/l_script.c',
'code/botlib/l_struct.c',
'code/jpeg-6/jcapimin.c',
'code/jpeg-6/jchuff.c',
'code/jpeg-6/jcinit.c',
'code/jpeg-6/jccoefct.c',
'code/jpeg-6/jccolor.c',
'code/jpeg-6/jfdctflt.c',
'code/jpeg-6/jcdctmgr.c',
'code/jpeg-6/jcphuff.c',
'code/jpeg-6/jcmainct.c',
'code/jpeg-6/jcmarker.c',
'code/jpeg-6/jcmaster.c',
'code/jpeg-6/jcomapi.c',
'code/jpeg-6/jcparam.c',
'code/jpeg-6/jcprepct.c',
'code/jpeg-6/jcsample.c',
'code/jpeg-6/jdapimin.c',
'code/jpeg-6/jdapistd.c',
'code/jpeg-6/jdatasrc.c',
'code/jpeg-6/jdcoefct.c',
'code/jpeg-6/jdcolor.c',
'code/jpeg-6/jddctmgr.c',
'code/jpeg-6/jdhuff.c',
'code/jpeg-6/jdinput.c',
'code/jpeg-6/jdmainct.c',
'code/jpeg-6/jdmarker.c',
'code/jpeg-6/jdmaster.c',
'code/jpeg-6/jdpostct.c',
'code/jpeg-6/jdsample.c',
'code/jpeg-6/jdtrans.c',
'code/jpeg-6/jerror.c',
'code/jpeg-6/jidctflt.c',
'code/jpeg-6/jmemmgr.c',
'code/jpeg-6/jmemnobs.c',
'code/jpeg-6/jutils.c',
'code/png/png.c',
'code/png/pngset.c',
'code/png/pngget.c',
'code/png/pngrutil.c',
'code/png/pngtrans.c',
'code/png/pngwutil.c',
'code/png/pngread.c',
'code/png/pngrio.c',
'code/png/pngwio.c',
'code/png/pngwrite.c',
'code/png/pngrtran.c',
'code/png/pngwtran.c',
'code/png/pngmem.c',
'code/png/pngerror.c',
'code/png/pngpread.c',
'code/renderer/tr_animation.c',
'code/renderer/tr_backend.c',
'code/renderer/tr_bsp.c',
'code/renderer/tr_cmds.c',
'code/renderer/tr_curve.c',
'code/renderer/tr_fbo.c',
'code/renderer/tr_flares.c',
'code/renderer/tr_font.c',
'code/renderer/tr_image.c',
'code/renderer/tr_init.c',
'code/renderer/tr_light.c',
'code/renderer/tr_main.c',
'code/renderer/tr_marks.c',
'code/renderer/tr_mesh.c',
'code/renderer/tr_model.c',
'code/renderer/tr_noise.c',
'code/renderer/tr_scene.c',
'code/renderer/tr_shade.c',
'code/renderer/tr_shade_calc.c',
'code/renderer/tr_shader.c',
'code/renderer/tr_shadows.c',
'code/renderer/tr_sky.c',
'code/renderer/tr_surface.c',
'code/renderer/tr_world.c'
]

unix_src = [
'code/unix/unix_main.c',
'code/unix/unix_net.c',
'code/unix/unix_shared.c'
]

linux_src = [
'code/unix/linux_common.c',
'code/unix/linux_glimp.c',
'code/unix/linux_joystick.c',
'code/unix/linux_qgl.c',
'code/unix/linux_signals.c'
]

win_src = [
'code/unix/linux_common.c',
'code/win32/win_main.c',
'code/win32/win_shared.c',
'code/win32/win_glimp.c',
'code/win32/win_gamma.c',
'code/win32/win_input.c',
'code/win32/win_qgl.c',
'code/win32/win_net.c',
'code/win32/win_snd.c',
'code/win32/win_syscon.c',
'code/win32/win_wndproc.c'
]

vm_src = [
'code/qcommon/vm.c',
'code/qcommon/vm_interpreted.c'
]

asm_src = [
'code/unix/ftol.nasm',
#'code/unix/snapvector.asm'
]

xreal_env.Append(CCFLAGS='-DBOTLIB')
xreal_env.Append(CCFLAGS='-DC_ONLY')

if env['purevm'] == 1:
	xreal_env.Append(CCFLAGS='-DVM_SV_PURE')

if env['arch'] == 'linux-i386':
	xreal_env.Append(LIBPATH='/usr/X11R6/lib')
	xreal_env.Append(LIBS=['X11', 'Xext', 'Xxf86dga', 'Xxf86vm'])
	xreal_env.Append(LIBS=['dl', 'm'])
	xreal_env.ParseConfig('xml2-config --cflags --libs')
	
	if env['freetype'] == 1:
		xreal_env.ParseConfig('freetype-config --cflags --libs')
		xreal_env.Append(CCFLAGS='-DBUILD_FREETYPE')
	
	if env['qvm'] == 1:
		vm_src += ['code/qcommon/vm_x86.c']
	else:
		xreal_env.Append(CCFLAGS='-DDLL_ONLY')
		
	if env['smp'] == 1:
		xreal_env.Append(CCFLAGS='-DSMP')
		xreal_env.Append(LIBS=['pthread'])
	
	if env['sound'] == 'oss':
		xreal_env.Program('xreal.x86', [xreal_src, unix_src, linux_src, vm_src, 'code/unix/linux_snd.c'])
	elif env['sound'] == 'alsa':
		xreal_env.Append(LIBS=['asound'])
		xreal_env.Program('xreal.x86', [xreal_src, unix_src, linux_src, vm_src, 'code/unix/linux_alsa.c'])
	else:
		xreal_env.ParseConfig('sdl-config --cflags --libs')
		xreal_env.Program('xreal.x86', [xreal_src, unix_src, linux_src, vm_src, 'code/unix/sdl_snd.c'])
		
	xreal_env.Install('#', 'xreal.x86')

elif env['arch'] == 'linux-x86_64':
	xreal_env.Append(LIBPATH='/usr/X11R6/lib')
	xreal_env.Append(LIBS=['X11', 'Xext', 'Xxf86dga', 'Xxf86vm'])
	xreal_env.Append(LIBS=['dl', 'm'])
	xreal_env.ParseConfig('xml2-config --cflags --libs')
	
	if env['freetype'] == 1:
		xreal_env.ParseConfig('freetype-config --cflags --libs')
		xreal_env.Append(CCFLAGS='-DBUILD_FREETYPE')
	
	if env['qvm'] == 1:
		vm_src += ['code/qcommon/vm_x86_64.c']
	else:
		xreal_env.Append(CCFLAGS='-DDLL_ONLY')
		
	if env['smp'] == 1:
		xreal_env.Append(CCFLAGS='-DSMP')
		xreal_env.Append(LIBS=['pthread'])
	
	if env['sound'] == 'oss':
		xreal_env.Program('xreal.x86_64', [xreal_src, unix_src, linux_src, vm_src, 'code/unix/linux_snd.c'])
	elif env['sound'] == 'alsa':
		xreal_env.Append(LIBS=['asound'])
		xreal_env.Program('xreal.x86_64', [xreal_src, unix_src, linux_src, vm_src, 'code/unix/linux_alsa.c'])
	else:
		xreal_env.ParseConfig('sdl-config --cflags --libs')
		xreal_env.Program('xreal.x86_64', [xreal_src, unix_src, linux_src, vm_src, 'code/unix/sdl_snd.c'])
		
	xreal_env.Install('#', 'xreal.x86_64')

elif env['arch'] == 'win32-mingw' or env['arch'] == 'win32-xmingw':
	if env['freetype'] == 1:
		xreal_env.ParseConfig('freetype-config --cflags --libs')
		xreal_env.Append(CCFLAGS='-DBUILD_FREETYPE')

	if env['qvm'] == 1:
		vm_src += ['code/qcommon/vm_x86.c']
	else:
		xreal_env.Append(CCFLAGS='-DDLL_ONLY')

	xreal_env.Append(LIBS=['m', 'gdi32', 'ole32', 'wsock32', 'winmm', 'libxml2'])
	xreal_env.Program('xreal', [xreal_src, win_src, vm_src])
	xreal_env.Install('#', 'xreal.exe')
