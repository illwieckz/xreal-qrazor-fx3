renderer
-GLSL backend (default and only supported at the moment)
-ARB backend which implements all used Cg shaders using GL_ARB_vertex_program and GL_ARB_fragment_program
-NV3X backend which implements all used Cg shaders using NV_vertex_program2 and NV_fragment_program
-Q3A BSP derivative support
-skeletal animation
-custom Doom3 like material shader language for surface materials and lights
-different render modes like diffuse per-pixel lighting or specular tangent-space bumpmapping
-basic Doom3 .proc support
-.md2 model loader
-.md3 model loader
-.md5mesh version 10 model loader
-.md5anim version 10 animation loader
-.ase model loader
-.lwo model loader
-.tga image loader
-.jpg image loader
-.png image loader
-deluxe mapping (invented by Randy Reddig the founder of the q3map2 BSP compiler) which allows static N dot L lighting for saving GPU power and radiosity based lighting
-new improved bump mapping techniques that combine deluxe mapping with parallax bump mapping and dynamic lighting
-different modes of environment mapping like reflection, refraction and dispersion
-post process effects like heat haze, uniform fog
-BSP and PVS usage for all static entities/lights
-Doom3 light shader support
-support for Doom3 omni-directional lights and projective lights
-.RoQ video support


client user interface
-splitted menu code into a separate module
-recoded menu framework in C++

client game
-splitted client game specific code into a separate module

client
-cleaned up code
-new OpenAL sound engine with an OpenAL specific sound shader language support
-support for different kinds of .wav files
-support for .ogg and .mp3 files

server
-cleaned up code
-clients are handled object oriented

server game
-game can allocate game objects dynamically
-object oriented C++ gamecode rewrite
-removed single player code for clean code base
-replaced collision code with ODE's geometric collision objects
-ODE based rigid body physics

common
-new virtual filesystem with support for .pk4 files
-improved cvar system
-improved cmd system
-recoded many parts in C++ to make it more flexible and safe
-new math classes for linear algebra like vec2_c vec3_c vec4_c matrix_c quaternion_c plane_c
-SIMD enhanced math functions using 3DNow! and SSE assembler
-bit based network code instead of byte based
-new netchan encoding/decoding inclusive basic support for on-the-fly zip compression
-replaced much old crappy code by smart boost:: and std:: code
