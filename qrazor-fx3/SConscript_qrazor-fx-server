import os, string, sys

Import('env')

qrazor_fx_server_src = [
'src/x_bitmessage.cxx',
'src/x_endian.cxx',
'src/x_info.cxx',
'src/x_math.cxx',
'src/x_protocol.cxx',
'src/x_shared.cxx',
'src/x_string.cxx',
#'src/ode/array.cxx',
#'src/ode/collision_kernel.cxx',
#'src/ode/collision_quadtreespace.cxx',
#'src/ode/collision_space.cxx',
#'src/ode/collision_std.cxx',
#'src/ode/collision_transform.cxx',
#'src/ode/collision_util.cxx',
#'src/ode/error.cxx',
#'src/ode/fast_dot.cxx',
#'src/ode/fast_ldlt.cxx',
#'src/ode/fast_lsolve.cxx',
#'src/ode/fast_ltsolve.cxx',
#'src/ode/joint.cxx',
#'src/ode/lcp.cxx',
#'src/ode/mass.cxx',
#'src/ode/mat.cxx',
#'src/ode/matrix.cxx',
#'src/ode/memory.cxx',
#'src/ode/misc.cxx',
#'src/ode/obstack.cxx',
#'src/ode/ode.cxx',
#'src/ode/odemath.cxx',
#'src/ode/rotation.cxx',
#'src/ode/step.cxx',
#'src/ode/step_quick.cxx',
#'src/ode/testing.cxx',
#'src/ode/timer.cxx',
#'src/ode/util.cxx',
'src/cm_ase.cxx',
'src/cm_bsp.cxx',
'src/cm_lwo.cxx',
'src/cm_main.cxx',
'src/cm_md3.cxx',
'src/cm_md5anim.cxx',
'src/cm_md5mesh.cxx',
'src/cmd.cxx',
'src/common.cxx',
'src/cvar.cxx',
'src/net_chan.cxx',
'src/sha1.cxx',
'src/vfs.cxx',
'src/unzip.cxx',
'src/sv_ccmds.cxx',
'src/sv_client.cxx',
'src/sv_ents.cxx',
'src/sv_game.cxx',
'src/sv_init.cxx',
'src/sv_main.cxx',
'src/sv_send.cxx',
'src/sv_user.cxx',
'src/cl_null.cxx',
'src/map_null.cxx' ]

qrazor_fx_server_env = env.Copy()
qrazor_fx_server_env.Append(CXXFLAGS = '-DDEDICATED_ONLY')

if sys.platform == 'linux2':
	qrazor_fx_server_src += ['src/sys_linux.cxx','src/glob.cxx']
	qrazor_fx_server_env.Append(LIBS=['dl', 'z', 'm'])
	qrazor_fx_server_env.Program('qrazor-fx-server', qrazor_fx_server_src)
	qrazor_fx_server_env.Install('#bin', 'qrazor-fx-server')

elif sys.platform == 'win32':
	qrazor_fx_server_src += ['src/sys_win.cxx']
	qrazor_fx_server_env.Append(LIBS=['z', 'm', 'winmm', 'wsock32'])
	qrazor_fx_server_env.Program('QRazor-FX-Server', qrazor_fx_server_src)
	qrazor_fx_server_env.Install('#bin', 'QRazor-FX-Server.exe')
