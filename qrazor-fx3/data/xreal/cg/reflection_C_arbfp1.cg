/// ============================================================================
/*
Copyright (C) 2004 Robert Beckebans <trebor_7@users.sourceforge.net>
Please see the file "AUTHORS" for a list of contributors

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/
/// ============================================================================

struct cg_vertex2fragment
{
	float4 position		: TEXCOORD0;
	float3 normal		: TEXCOORD1;
};

struct cg_fragment2final
{
	float4 color		: COLOR;
};


cg_fragment2final main(in	cg_vertex2fragment IN,
				uniform samplerCUBE colormap,
				uniform float3 view_origin)
{
	cg_fragment2final OUT;
	
	// compute incident ray
	float3 I = normalize(IN.position.xyz - view_origin);
	
	// compute normal
	float3 N = normalize(IN.normal);
	
	// compute reflection ray
	float3 R = reflect(I, N);
	
	float3 reflect_color = texCUBE(colormap, R).rgb;

	OUT.color = float4(reflect_color, 1.0);
    
	return OUT;
}
