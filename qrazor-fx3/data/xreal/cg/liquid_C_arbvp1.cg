/// ============================================================================
/*
Copyright (C) 2004 Robert Beckebans <trebor_7@users.sourceforge.net>
Please see the file "AUTHORS" for a list of contributors

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/
/// ============================================================================


struct cg_app2vertex
{
	float4 position		: POSITION;
};

struct cg_vertex2fragment
{
	float4 hposition 	: POSITION;
	float4 tex0		: TEXCOORD0;
	float4 tex1		: TEXCOORD1;
	float4 color0		: COLOR0;
	float4 color1		: COLOR1;
};

void	calcWave(	out float disp,
			out float2 normal,
			
			float dampening,
			float3 viewPosition,
			float waveTime,
			float height,
			float frequency,
			float2 waveDirection	)
{
	float distance1 = dot(viewPosition.xy, waveDirection);

	distance1 = frequency * distance1 + waveTime;

	disp = height * sin(distance1) / dampening;
	normal = -cos(distance1) * height * frequency * (waveDirection.xy) / (.4*dampening);
}

cg_vertex2fragment main(cg_app2vertex IN,
			uniform float    Time,
			uniform float4   Wave1,
			uniform float4   Wave1Origin,
			uniform float4   Wave2,
			uniform float4   Wave2Origin,
			const uniform float4     WaveData[5])
{
	cg_vertex2fragment OUT;

	float4 position = float4(IN.position.x, 0, IN.position.y, 1);
	float4 normal = float4(0,1,0,0);
	float dampening = (dot(position.xyz, position.xyz)/1000+1);
	float disp;
	float2 norm;

    
	for(int i=0; i<5; i=i+1)
	{
        	float waveTime  = Time.x * WaveData[i].z;
        	float frequency = WaveData[i].z;
        	float height    = WaveData[i].w;
        	float2 waveDir  = WaveData[i].xy;

        	calcWave(disp, norm, dampening, IN.position.xyz, waveTime, height, frequency, waveDir);
        	position.y = position.y + disp;
		normal.xz = normal.xz + norm;
	}
	
	
	OUT.hposition = mul(glstate.matrix.mvp, position);
	
	// transfom normal into eye-space
	normal = mul(glstate.matrix.invtrans.modelview[0], normal);
	normal.xyz = normalize(normal.xyz);
	
	// get a vector from the vertex to the eye
	float3  eyeToVert = mul(glstate.matrix.modelview[0], position).xyz;
	eyeToVert = normalize(eyeToVert);
	
	// calculate the reflected vector for cubemap look-up
	float4 reflected = mul(glstate.matrix.texture[0], reflect(eyeToVert, normal.xyz).xyzz);
	
	// output two reflection vectors for the two environment cubemaps
	OUT.tex0 = reflected;
	OUT.tex1 = reflected;
	
	// Calculate a fresnel term (note that f0 = 0)
	float fres = 1+dot(eyeToVert,normal.xyz);
	fres = pow(fres, 5);
	
	// set the two color coefficients (the magic constants are arbitrary), 
	// these two color coefficients are used to calculate the contribution from 
	// each of the two environment cubemaps (one bright, one dark)
	OUT.color0 = (fres*1.4 + min(reflected.y,0)).xxxx + float4(.2,.3,.3,0);
	OUT.color1 = (fres*1.26).xxxx;
	
	return OUT;
}
